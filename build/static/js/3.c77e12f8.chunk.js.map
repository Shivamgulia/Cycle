{"version":3,"sources":["components/How/UseDes.js","pages/HowToUse.js","components/auth/AuthForm.module.css","components/auth/AuthForm.js","pages/AuthPage.js"],"names":["UseDes","href","HowToUse","module","exports","AuthForm","history","useHistory","useState","isVerified","setIsVerified","showPassword","setShowPassword","authCtx","useContext","AuthContext","emailInputRef","useRef","passwordInputRef","isLoading","setIsLoading","path","className","classes","auth","onSubmit","event","preventDefault","enteredEmail","current","value","enteredPassword","fetch","method","body","JSON","stringify","email","password","headers","then","res","ok","json","data","errorMessage","error","message","Error","experationTime","Date","getTime","login","token","_id","role","cycleid","toISOString","replace","catch","err","alert","control","htmlFor","type","id","required","ref","onClick","sitekey","onChange","actions","push","AuthPage"],"mappings":"0NAEe,SAASA,IACtB,OACE,gCACE,uCACA,+PAMA,wDACA,+BACE,mFACA,mBAAGC,KAAK,GAAR,8BACA,8SAMA,uFACA,kKAIA,qJCzBO,SAASC,IACtB,OAAO,cAACF,EAAD,M,mBCFTG,EAAOC,QAAU,CAAC,KAAO,uBAAuB,QAAU,0BAA0B,QAAU,0BAA0B,OAAS,2B,+GCqJlHC,EA7IE,WACf,IAAMC,EAAUC,cAEhB,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EAAUC,qBAAWC,KAErBC,EAAgBC,mBAChBC,EAAmBD,mBAEzB,EAAkCT,oBAAS,GAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KAkFA,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAOC,KAAK,iBAAZ,SAGE,cAACnB,EAAA,QAAD,MAEF,0BAASoB,UAAWC,IAAQC,KAA5B,UACE,uCACA,uBAAMC,SAxEa,SAACC,GAGxB,GAFAA,EAAMC,iBAEFlB,EAAY,CACd,IAAMmB,EAAeZ,EAAca,QAAQC,MACrCC,EAAkBb,EAAiBW,QAAQC,MAEjDV,GAAa,GAMbY,MAFY,qCAED,CACTC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,MAAOT,EACPU,SAAUP,IAEZQ,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GAEL,OADArB,GAAa,GACTqB,EAAIC,GACCD,EAAIE,OAEJF,EAAIE,OAAOH,MAAK,SAACI,GACtB,IAAIC,EAAe,wBAKnB,MAJID,GAAQA,EAAKE,OAASF,EAAKE,MAAMC,UACnC3B,GAAa,GACbyB,EAAeD,EAAKE,MAAMC,SAEtB,IAAIC,MAAMH,SAIrBL,MAAK,SAACI,GACL,IAAMK,EAAiB,IAAIC,MAAK,IAAIA,MAAOC,UAAY,MACvDtC,EAAQuC,MACNR,EACAb,EACAa,EAAKS,MACLT,EAAKU,IACLV,EAAKW,KACLX,EAAKY,QACLP,EAAeQ,eAEjBnD,EAAQoD,QAAQ,QAEjBC,OAAM,SAACC,GACNC,MAAMD,EAAIb,iBAGdc,MAAM,4BAiBJ,UACE,sBAAKvC,UAAWC,IAAQuC,QAAxB,UACE,uBAAOC,QAAQ,QAAf,wBACA,uBAAOC,KAAK,WAAWC,GAAG,WAAWC,UAAQ,EAACC,IAAKnD,OAErD,sBAAKM,UAAWC,IAAQuC,QAAxB,UACE,uBAAOC,QAAQ,WAAf,2BACA,uBACEC,KAAMrD,EAAe,OAAS,WAC9BsD,GAAG,WACHC,UAAQ,EACRC,IAAKjD,OAGT,uBAAO8C,KAAK,WAAWI,QA3FJ,WACrBzD,GAAcC,GAAgB,GAC7BD,GAAcC,GAAgB,MA2E/B,iBAeE,qBAAKU,UAAU,WAAf,SAOE,cAAC,IAAD,CACE+C,QAAQ,2CACRC,SAjHZ,SAAkBxC,GAChBpB,GAAc,QAmHR,sBAAKY,UAAWC,IAAQgD,QAAxB,WACIpD,GAAa,2CACdA,GAAa,0DAGlB,qBAAKG,UAAWC,IAAQgD,QAAxB,SACE,wBAAQH,QA9CM,WACpB9D,EAAQkE,KAAK,YA6CP,+BCrIKC,UARE,WACf,OACE,mCACE,cAAC,EAAD","file":"static/js/3.c77e12f8.chunk.js","sourcesContent":["import classes from './UseDes.module.css';\n\nexport default function UseDes() {\n  return (\n    <div>\n      <h1>About</h1>\n      <p>\n        Green rides is an application developed to make the renting of cycles\n        easier just by scanning the qr code present on cycles. Students can rent\n        the cycles from any stand and then return it to the guard present in any\n        stand.\n      </p>\n      <h1>How to Use Green Rides</h1>\n      <ul>\n        <li>Download the Green Rides app with the link below.</li>\n        <a href=\"\">Download the App</a>\n        <li>\n          Sign Up using your University email Id in the signup option. Do not\n          use your personal email if you do you will have to uninstall and then\n          reinstall the app. After that you will be prompted to create a\n          password for your account, create a password and create an account.\n        </li>\n        <li>Now, you can eaily login with you email and password.</li>\n        <li>\n          To Rent a cycle just go the the rent option, scan the QR code present\n          on the cycle and confirm that you want to rent this cycle.\n        </li>\n        <li>\n          To Return the cycle just take it to the guard, he will scan the qr\n          code with his device and return the cycle.\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import UseDes from '../components/How/UseDes';\n\nexport default function HowToUse() {\n  return <UseDes />;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__2ZSKH\",\"control\":\"AuthForm_control__1evQ4\",\"actions\":\"AuthForm_actions__25Vmz\",\"toggle\":\"AuthForm_toggle__1Wxr6\"};","import { useState, useRef, useContext, Fragment } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport HowToUse from '../../pages/HowToUse';\nimport { Route } from 'react-router-dom';\n\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\n\nconst AuthForm = () => {\n  const history = useHistory();\n\n  const [isVerified, setIsVerified] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const authCtx = useContext(AuthContext);\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  function onChange(value) {\n    setIsVerified(true);\n    // console.log('Captcha value:', value);\n  }\n\n  // const verifyCallback = () => {\n  //   setIsVerified(true);\n  // };\n  // const load = () => {\n  //   setIsVerified(false);\n  // };\n\n  const toggleShowPassword = () => {\n    if (showPassword) setShowPassword(false);\n    if (!showPassword) setShowPassword(true);\n  };\n\n  const submitionHandler = (event) => {\n    event.preventDefault();\n\n    if (isVerified) {\n      const enteredEmail = emailInputRef.current.value;\n      const enteredPassword = passwordInputRef.current.value;\n\n      setIsLoading(true);\n\n      //  const url = 'https://cycle-api.azurewebsites.net/users/login'; //login send req url\n      // const url = 'http://64.226.69.16/users/login';\n      const url = 'https://app.hbtu.ac.in/users/login';\n\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => {\n          setIsLoading(false);\n          if (res.ok) {\n            return res.json();\n          } else {\n            return res.json().then((data) => {\n              let errorMessage = 'Authentication Failed';\n              if (data && data.error && data.error.message) {\n                setIsLoading(false);\n                errorMessage = data.error.message;\n              }\n              throw new Error(errorMessage);\n            });\n          }\n        })\n        .then((data) => {\n          const experationTime = new Date(new Date().getTime() + +36000000);\n          authCtx.login(\n            data,\n            enteredPassword,\n            data.token,\n            data._id,\n            data.role,\n            data.cycleid,\n            experationTime.toISOString()\n          );\n          history.replace('/');\n        })\n        .catch((err) => {\n          alert(err.message);\n        });\n    } else {\n      alert('Verify if you are human');\n    }\n  };\n\n  const signupHandler = () => {\n    history.push('/signup');\n  };\n\n  return (\n    <Fragment>\n      <Route path=\"/auth/howtouse\">\n        {/* {loggedIn && <Redirect to=\"/mainPage\" />} */}\n        {/* {!loggedIn && <Signup />} */}\n        <HowToUse />\n      </Route>\n      <section className={classes.auth}>\n        <h1>Login</h1>\n        <form onSubmit={submitionHandler}>\n          <div className={classes.control}>\n            <label htmlFor=\"email\">Your Email</label>\n            <input type=\"userName\" id=\"userName\" required ref={emailInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"password\">Your Password</label>\n            <input\n              type={showPassword ? 'text' : 'password'}\n              id=\"password\"\n              required\n              ref={passwordInputRef}\n            />\n          </div>\n          <input type=\"checkbox\" onClick={toggleShowPassword} /> Show Password\n          <div className=\"centered\">\n            {/* <Recaptcha\n            sitekey=\"6LfOzVQjAAAAACIJVTM3w4iuAePfdEloNCQvRhj-\"\n            render=\"explicit\"\n            verifyCallback={verifyCallback}\n            onloadCallback={load}\n          /> */}\n            <ReCAPTCHA\n              sitekey=\"6LcU0VQjAAAAAHdKzj2Ub7RAbfQCf6QXbgOif9Le\"\n              onChange={onChange}\n            />\n          </div>\n          <div className={classes.actions}>\n            {!isLoading && <button>Login</button>}\n            {isLoading && <p>Sending Request....</p>}\n          </div>\n        </form>\n        <div className={classes.actions}>\n          <button onClick={signupHandler}> Sign Up</button>\n        </div>\n      </section>\n    </Fragment>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from '../components/auth/AuthForm';\n\nconst AuthPage = () => {\n  return (\n    <>\n      <AuthForm />\n    </>\n  );\n};\n\nexport default AuthPage;\n"],"sourceRoot":""}