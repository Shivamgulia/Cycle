{"ast":null,"code":"const FIREBASE_DOMAIN = 'https://quotes-33a21-default-rtdb.firebaseio.com';\nexport async function getAllQuotes() {\n  const response = await fetch('http://localhost:8080/quotes', {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\nexport async function deleteQuote(quotes) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quotes}.json`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  console.log('well');\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Reactjs/Routing/09-time-to-practice-starting-code/src/components/lib/api.js"],"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","method","headers","Accept","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","body","JSON","stringify","deleteQuote","quotes","console","log","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"mappings":"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","sourcesContent":["const FIREBASE_DOMAIN = 'https://quotes-33a21-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch('http://localhost:8080/quotes', {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function deleteQuote(quotes) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quotes}.json`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n  console.log('well');\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n    {\n      method: 'POST',\n      body: JSON.stringify(requestData.commentData),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n"]},"metadata":{},"sourceType":"module"}