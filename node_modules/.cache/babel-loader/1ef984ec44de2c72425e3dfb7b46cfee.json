{"ast":null,"code":"import _classCallCheck from \"/Users/shivamgulia/Developer/Microsoft/Green Rides/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/shivamgulia/Developer/Microsoft/Green Rides/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/shivamgulia/Developer/Microsoft/Green Rides/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/shivamgulia/Developer/Microsoft/Green Rides/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport React, { Component } from 'react';\nimport jsQR from 'jsqr';\nvar _global = global,\n    requestAnimationFrame = _global.requestAnimationFrame;\n\nvar QRScan = /*#__PURE__*/function (_Component) {\n  _inherits(QRScan, _Component);\n\n  var _super = _createSuper(QRScan);\n\n  function QRScan(props) {\n    var _this;\n\n    _classCallCheck(this, QRScan);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      notEnabled: true,\n      loading: true,\n      video: null\n    };\n    return _this;\n  }\n\n  _createClass(QRScan, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var video = document.createElement('video');\n      var canvasElement = document.getElementById('qrCanvas');\n      var canvas = canvasElement.getContext('2d');\n      this.setState({\n        video: video\n      });\n      navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: 'environment'\n        }\n      }).then(function (stream) {\n        video.srcObject = stream;\n        video.setAttribute('playsinline', true);\n        video.play();\n        requestAnimationFrame(tick);\n      });\n\n      var tick = function tick() {\n        if (_this2.state.notEnabled) _this2.setState({\n          notEnabled: false\n        });\n\n        if (video.readyState === video.HAVE_ENOUGH_DATA) {\n          if (_this2.state.loading) _this2.setState({\n            loading: false\n          });\n          canvasElement.height = video.videoHeight;\n          canvasElement.width = video.videoWidth;\n          canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\n          var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);\n          var code = jsQR(imageData.data, imageData.width, imageData.height, {\n            inversionAttempts: 'dontInvert'\n          });\n\n          if (code) {\n            _this2.props.onFind(code.data);\n          }\n        }\n\n        requestAnimationFrame(tick);\n      };\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.state.video.pause();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var message;\n\n      if (this.state.notEnabled) {\n        message = React.createElement(\"div\", null, React.createElement(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"camera\"\n        }, \"\\uD83C\\uDFA5\"), \" Unable to access video stream (please make sure you have a webcam enabled)\");\n      } else if (this.state.loading) {\n        message = React.createElement(\"div\", null, React.createElement(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"time\"\n        }, \"\\u231B\"), \" Loading video...\");\n      }\n\n      return React.createElement(\"div\", null, message, React.createElement(\"canvas\", {\n        id: \"qrCanvas\"\n      }));\n    }\n  }]);\n\n  return QRScan;\n}(Component);\n\nexport default QRScan;","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Microsoft/Green Rides/node_modules/qrscan/dist/QRScan.js"],"names":["React","Component","jsQR","global","requestAnimationFrame","QRScan","props","state","notEnabled","loading","video","document","createElement","canvasElement","getElementById","canvas","getContext","setState","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","setAttribute","play","tick","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","drawImage","imageData","getImageData","code","data","inversionAttempts","onFind","pause","message","role","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport jsQR from 'jsqr';\nconst {\n  requestAnimationFrame\n} = global;\n\nclass QRScan extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notEnabled: true,\n      loading: true,\n      video: null\n    };\n  }\n\n  componentDidMount() {\n    const video = document.createElement('video');\n    const canvasElement = document.getElementById('qrCanvas');\n    const canvas = canvasElement.getContext('2d');\n    this.setState({\n      video\n    });\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: 'environment'\n      }\n    }).then(function (stream) {\n      video.srcObject = stream;\n      video.setAttribute('playsinline', true);\n      video.play();\n      requestAnimationFrame(tick);\n    });\n\n    const tick = () => {\n      if (this.state.notEnabled) this.setState({\n        notEnabled: false\n      });\n\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        if (this.state.loading) this.setState({\n          loading: false\n        });\n        canvasElement.height = video.videoHeight;\n        canvasElement.width = video.videoWidth;\n        canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\n        var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);\n        var code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: 'dontInvert'\n        });\n\n        if (code) {\n          this.props.onFind(code.data);\n        }\n      }\n\n      requestAnimationFrame(tick);\n    };\n  }\n\n  componentWillUnmount() {\n    this.state.video.pause();\n  }\n\n  render() {\n    let message;\n\n    if (this.state.notEnabled) {\n      message = React.createElement(\"div\", null, React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"camera\"\n      }, \"\\uD83C\\uDFA5\"), \" Unable to access video stream (please make sure you have a webcam enabled)\");\n    } else if (this.state.loading) {\n      message = React.createElement(\"div\", null, React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"time\"\n      }, \"\\u231B\"), \" Loading video...\");\n    }\n\n    return React.createElement(\"div\", null, message, React.createElement(\"canvas\", {\n      id: \"qrCanvas\"\n    }));\n  }\n\n}\n\nexport default QRScan;"]},"metadata":{},"sourceType":"module"}