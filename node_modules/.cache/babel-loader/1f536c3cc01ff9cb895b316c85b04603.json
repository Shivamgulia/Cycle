{"ast":null,"code":"import React, { Component } from 'react';\nimport jsQR from 'jsqr';\nconst {\n  requestAnimationFrame\n} = global;\n\nclass QRScan extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notEnabled: true,\n      loading: true,\n      video: null\n    };\n  }\n\n  componentDidMount() {\n    const video = document.createElement('video');\n    const canvasElement = document.getElementById('qrCanvas');\n    const canvas = canvasElement.getContext('2d');\n    this.setState({\n      video\n    });\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: 'environment'\n      }\n    }).then(function (stream) {\n      video.srcObject = stream;\n      video.setAttribute('playsinline', true);\n      video.play();\n      requestAnimationFrame(tick);\n    });\n\n    const tick = () => {\n      if (this.state.notEnabled) this.setState({\n        notEnabled: false\n      });\n\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        if (this.state.loading) this.setState({\n          loading: false\n        });\n        canvasElement.height = video.videoHeight;\n        canvasElement.width = video.videoWidth;\n        canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\n        var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);\n        var code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: 'dontInvert'\n        });\n\n        if (code) {\n          this.props.onFind(code.data);\n        }\n      }\n\n      requestAnimationFrame(tick);\n    };\n  }\n\n  componentWillUnmount() {\n    this.state.video.pause();\n  }\n\n  render() {\n    let message;\n\n    if (this.state.notEnabled) {\n      message = React.createElement(\"div\", null, React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"camera\"\n      }, \"\\uD83C\\uDFA5\"), \" Unable to access video stream (please make sure you have a webcam enabled)\");\n    } else if (this.state.loading) {\n      message = React.createElement(\"div\", null, React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"time\"\n      }, \"\\u231B\"), \" Loading video...\");\n    }\n\n    return React.createElement(\"div\", null, message, React.createElement(\"canvas\", {\n      id: \"qrCanvas\"\n    }));\n  }\n\n}\n\nexport default QRScan;","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Green Riders/Green Rides React/node_modules/qrscan/dist/QRScan.js"],"names":["React","Component","jsQR","requestAnimationFrame","global","QRScan","constructor","props","state","notEnabled","loading","video","componentDidMount","document","createElement","canvasElement","getElementById","canvas","getContext","setState","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","setAttribute","play","tick","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","drawImage","imageData","getImageData","code","data","inversionAttempts","onFind","componentWillUnmount","pause","render","message","role","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport jsQR from 'jsqr';\nconst {\n  requestAnimationFrame\n} = global;\n\nclass QRScan extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notEnabled: true,\n      loading: true,\n      video: null\n    };\n  }\n\n  componentDidMount() {\n    const video = document.createElement('video');\n    const canvasElement = document.getElementById('qrCanvas');\n    const canvas = canvasElement.getContext('2d');\n    this.setState({\n      video\n    });\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        facingMode: 'environment'\n      }\n    }).then(function (stream) {\n      video.srcObject = stream;\n      video.setAttribute('playsinline', true);\n      video.play();\n      requestAnimationFrame(tick);\n    });\n\n    const tick = () => {\n      if (this.state.notEnabled) this.setState({\n        notEnabled: false\n      });\n\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        if (this.state.loading) this.setState({\n          loading: false\n        });\n        canvasElement.height = video.videoHeight;\n        canvasElement.width = video.videoWidth;\n        canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\n        var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);\n        var code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: 'dontInvert'\n        });\n\n        if (code) {\n          this.props.onFind(code.data);\n        }\n      }\n\n      requestAnimationFrame(tick);\n    };\n  }\n\n  componentWillUnmount() {\n    this.state.video.pause();\n  }\n\n  render() {\n    let message;\n\n    if (this.state.notEnabled) {\n      message = React.createElement(\"div\", null, React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"camera\"\n      }, \"\\uD83C\\uDFA5\"), \" Unable to access video stream (please make sure you have a webcam enabled)\");\n    } else if (this.state.loading) {\n      message = React.createElement(\"div\", null, React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"time\"\n      }, \"\\u231B\"), \" Loading video...\");\n    }\n\n    return React.createElement(\"div\", null, message, React.createElement(\"canvas\", {\n      id: \"qrCanvas\"\n    }));\n  }\n\n}\n\nexport default QRScan;"]},"metadata":{},"sourceType":"module"}