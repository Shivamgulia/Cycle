{"ast":null,"code":"// import { useContext } from 'react';\n// import AuthContext from '../../store/auth-context';\n// const FIREBASE_DOMAIN = 'https://quotes-33a21-default-rtdb.firebaseio.com';\nexport async function getAllQuotes(props) {\n  // const authCtx = useContext(AuthContext);\n  const response = await fetch('http://localhost:8080/quotes', {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(props) {\n  const response = await fetch(`http://localhost:8080/quotes/${props.id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: props.id,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch('http://localhost:8080/quotes/', {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n} // export async function deleteQuote(quoteId) {\n//   console.log('a' + quoteId);\n//   const response = await fetch(`http://localhost:8080/quotes/${quoteId}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not create quote.');\n//   }\n//   console.log('well');\n//   return null;\n// }\n\nexport async function addComment(requestData) {\n  const response = await fetch('http://localhost:8080/comments', {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n} // export async function getAllComments(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n//   const data = await response.json();\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not get comments.');\n//   }\n//   const transformedComments = [];\n//   for (const key in data) {\n//     const commentObj = {\n//       id: key,\n//       ...data[key],\n//     };\n//     transformedComments.push(commentObj);\n//   }\n//   return transformedComments;\n// }","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Quotes project /React/QUOTES/src/components/lib/api.js"],"names":["getAllQuotes","props","response","fetch","headers","Authorization","token","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","addComment","requestData","commentData","commentId","name"],"mappings":"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","sourcesContent":["// import { useContext } from 'react';\n// import AuthContext from '../../store/auth-context';\n\n// const FIREBASE_DOMAIN = 'https://quotes-33a21-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes(props) {\n  // const authCtx = useContext(AuthContext);\n  const response = await fetch('http://localhost:8080/quotes', {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(props) {\n  const response = await fetch(`http://localhost:8080/quotes/${props.id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: props.id,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch('http://localhost:8080/quotes/', {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\n// export async function deleteQuote(quoteId) {\n//   console.log('a' + quoteId);\n//   const response = await fetch(`http://localhost:8080/quotes/${quoteId}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not create quote.');\n//   }\n//   console.log('well');\n\n//   return null;\n// }\n\nexport async function addComment(requestData) {\n  const response = await fetch('http://localhost:8080/comments', {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\n// export async function getAllComments(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not get comments.');\n//   }\n\n//   const transformedComments = [];\n\n//   for (const key in data) {\n//     const commentObj = {\n//       id: key,\n//       ...data[key],\n//     };\n\n//     transformedComments.push(commentObj);\n//   }\n\n//   return transformedComments;\n// }\n"]},"metadata":{},"sourceType":"module"}