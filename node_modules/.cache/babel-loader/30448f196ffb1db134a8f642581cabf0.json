{"ast":null,"code":"// import { useContext } from 'react';\n// import AuthContext from '../../store/auth-context';\nconst url = 'https://pacific-fortress-54764.herokuapp.com';\nexport async function rentCycle(props) {\n  // const authCtx = useContext(AuthContext);\n  // console.log({\n  //   'Content-Type': 'application/json',\n  //   Authorization: 'Bearer ' + props,\n  // });\n  // console.log(props);\n  let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json' // Authorization: 'Bearer ' + props,\n\n    }\n  });\n  let data = await response.json();\n\n  if (!response.ok) {\n    // console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  if (props.role === 'student' && data.status === 'rented') {\n    throw new Error('Cycle already Rented');\n  }\n\n  if (props.role === 'guard' && data.status === '') {\n    throw new Error('Cycle not Rented Yet');\n  }\n\n  let cycle;\n  if (props.role === 'student') cycle = props.cycleid;\n  if (props.role === 'guard') cycle = '';\n  console.log({\n    cycleid: cycle,\n    userid: props.userid\n  });\n  response = await fetch(`${url}/users/${props.userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      cycleid: cycle\n    }),\n    headers: {\n      'Content-Type': 'application/json' // Authorization: 'Bearer ' + props,\n\n    }\n  });\n  data = await response.json(); // console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  let user;\n  if (props.role === 'student') user = props.userid;\n  if (props.role === 'guard') user = '';\n  let stat;\n  if (props.role === 'student') stat = 'rented';\n  if (props.role === 'guard') stat = ''; // console.log({\n  //   staus: stat,\n  //   userid: user,\n  // });\n\n  response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      status: stat,\n      stdid: user\n    }),\n    headers: {\n      'Content-Type': 'application/json' // Authorization: 'Bearer ' + props,\n\n    }\n  });\n  data = await response.json();\n\n  if (!response.ok) {\n    // console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  console.log('rented');\n  return 'Cycle Rented';\n} //\n// export async function returnCycle(props) {\n//   // const authCtx = useContext(AuthContext);\n//   console.log({\n//     'Content-Type': 'application/json',\n//     Authorization: 'Bearer ' + props,\n//   });\n//   let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   let data = await response.json();\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   if (data.status === 'rented') {\n//     throw new Error('Cycle already Rented');\n//   }\n//   response = await fetch(`${url}/users/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ status: 'rented', cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   data = await response.json();\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   response = await fetch(`${url}/cycles/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   data = await response.json();\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   return data;\n// }\n//\n//\n//\n//\n\nexport async function getSingleQuote(props) {\n  const response = await fetch(`http://localhost:8080/quotes/${props.id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: props.id,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(props) {\n  const response = await fetch('http://localhost:8080/quotes/', {\n    method: 'POST',\n    body: JSON.stringify(props.quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n} // export async function deleteQuote(quoteId) {\n//   console.log('a' + quoteId);\n//   const response = await fetch(`http://localhost:8080/quotes/${quoteId}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not create quote.');\n//   }\n//   console.log('well');\n//   return null;\n// }\n\nexport async function addComment(props) {\n  console.log('fuck');\n  console.log(`Bearer ${props.token}`);\n  const response = await fetch('http://localhost:8080/comments', {\n    method: 'POST',\n    body: JSON.stringify(props.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n  console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n} // export async function getAllComments(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n//   const data = await response.json();\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not get comments.');\n//   }\n//   const transformedComments = [];\n//   for (const key in data) {\n//     const commentObj = {\n//       id: key,\n//       ...data[key],\n//     };\n//     transformedComments.push(commentObj);\n//   }\n//   return transformedComments;\n// }","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Green Riders/JS/cycle/src/components/lib/api.js"],"names":["url","rentCycle","props","response","fetch","cycleid","method","headers","data","json","ok","Error","message","role","status","cycle","console","log","userid","body","JSON","stringify","user","stat","stdid","getSingleQuote","id","Authorization","token","loadedQuote","addQuote","quoteData","addComment","commentData","commentId","name"],"mappings":"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","sourcesContent":["// import { useContext } from 'react';\n// import AuthContext from '../../store/auth-context';\n\nconst url = 'https://pacific-fortress-54764.herokuapp.com';\n\nexport async function rentCycle(props) {\n  // const authCtx = useContext(AuthContext);\n  // console.log({\n  //   'Content-Type': 'application/json',\n  //   Authorization: 'Bearer ' + props,\n  // });\n  // console.log(props);\n  let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      // Authorization: 'Bearer ' + props,\n    },\n  });\n  let data = await response.json();\n\n  if (!response.ok) {\n    // console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  if (props.role === 'student' && data.status === 'rented') {\n    throw new Error('Cycle already Rented');\n  }\n\n  if (props.role === 'guard' && data.status === '') {\n    throw new Error('Cycle not Rented Yet');\n  }\n\n  let cycle;\n  if (props.role === 'student') cycle = props.cycleid;\n  if (props.role === 'guard') cycle = '';\n\n  console.log({\n    cycleid: cycle,\n    userid: props.userid,\n  });\n  response = await fetch(`${url}/users/${props.userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      cycleid: cycle,\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n      // Authorization: 'Bearer ' + props,\n    },\n  });\n\n  data = await response.json();\n\n  // console.log(response);\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  let user;\n  if (props.role === 'student') user = props.userid;\n  if (props.role === 'guard') user = '';\n\n  let stat;\n  if (props.role === 'student') stat = 'rented';\n  if (props.role === 'guard') stat = '';\n\n  // console.log({\n  //   staus: stat,\n  //   userid: user,\n  // });\n\n  response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({ status: stat, stdid: user }),\n    headers: {\n      'Content-Type': 'application/json',\n      // Authorization: 'Bearer ' + props,\n    },\n  });\n\n  data = await response.json();\n\n  if (!response.ok) {\n    // console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  console.log('rented');\n  return 'Cycle Rented';\n}\n\n//\n\n// export async function returnCycle(props) {\n//   // const authCtx = useContext(AuthContext);\n//   console.log({\n//     'Content-Type': 'application/json',\n//     Authorization: 'Bearer ' + props,\n//   });\n//   let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   let data = await response.json();\n\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n\n//   if (data.status === 'rented') {\n//     throw new Error('Cycle already Rented');\n//   }\n\n//   response = await fetch(`${url}/users/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ status: 'rented', cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n\n//   data = await response.json();\n\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n\n//   response = await fetch(`${url}/cycles/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n\n//   data = await response.json();\n\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   return data;\n// }\n\n//\n\n//\n\n//\n\n//\n\nexport async function getSingleQuote(props) {\n  const response = await fetch(`http://localhost:8080/quotes/${props.id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: props.id,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(props) {\n  const response = await fetch('http://localhost:8080/quotes/', {\n    method: 'POST',\n    body: JSON.stringify(props.quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\n// export async function deleteQuote(quoteId) {\n//   console.log('a' + quoteId);\n//   const response = await fetch(`http://localhost:8080/quotes/${quoteId}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not create quote.');\n//   }\n//   console.log('well');\n\n//   return null;\n// }\n\nexport async function addComment(props) {\n  console.log('fuck');\n  console.log(`Bearer ${props.token}`);\n  const response = await fetch('http://localhost:8080/comments', {\n    method: 'POST',\n    body: JSON.stringify(props.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n  console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\n// export async function getAllComments(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not get comments.');\n//   }\n\n//   const transformedComments = [];\n\n//   for (const key in data) {\n//     const commentObj = {\n//       id: key,\n//       ...data[key],\n//     };\n\n//     transformedComments.push(commentObj);\n//   }\n\n//   return transformedComments;\n// }\n"]},"metadata":{},"sourceType":"module"}