{"ast":null,"code":"var _jsxFileName = \"/Users/shivamgulia/Developer/Green Riders/JS/cycle/src/components/auth/AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  const history = useHistory();\n  const [showPassword, setShowPassword] = useState(false);\n  const authCtx = useContext(AuthContext);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const handleCallbackResponse = response => {\n    console.log('hi');\n    console.log('Encoded JWT ID Token ' + response.credential);\n    var userObj = jwt_decode(response.credential);\n    console.log(userObj);\n    setUserObject({\n      user: jwt_decode(response.credential)\n    });\n    document.getElementById('signupDiv').hidden = true;\n  };\n\n  const logoutHandler = () => {\n    setUserObject({});\n    document.getElementById('signupDiv').hidden = false;\n  };\n\n  useEffect(() => {\n    /* global google */\n    google.accounts.id.initialize({\n      client_id: '622560773772-iifqp88cithvc1osdp9d03126cvv0d9s.apps.googleusercontent.com',\n      callback: handleCallbackResponse\n    });\n    google.accounts.id.renderButton(document.getElementById('signupDiv'), {\n      theme: 'outline',\n      size: 'large'\n    });\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const toggleShowPassword = () => {\n    if (showPassword) setShowPassword(false);\n    if (!showPassword) setShowPassword(true);\n  };\n\n  const submitionHandler = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    setIsLoading(true);\n    let url;\n    url = 'https://pacific-fortress-54764.herokuapp.com/users/login'; //login send req url\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      setIsLoading(false);\n\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          let errorMessage = 'Authentication Failed';\n\n          if (data && data.error && data.error.message) {\n            errorMessage = data.error.message;\n          }\n\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      const experationTime = new Date(new Date().getTime() + +36000000);\n      authCtx.login(data, data.token, data._id, data.role, data.cycleid, experationTime.toISOString());\n      history.replace('/');\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitionHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"userName\",\n          id: \"userName\",\n          required: true,\n          ref: emailInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: showPassword ? 'text' : 'password',\n          id: \"password\",\n          required: true,\n          ref: passwordInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onClick: toggleShowPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), \" Show Password\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 26\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sending Request....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"signupDiv\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"ueoC+5fsYnDTrpYuysc62DV9IDs=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Green Riders/JS/cycle/src/components/auth/AuthForm.js"],"names":["useState","useRef","useContext","useEffect","useHistory","jwt_decode","AuthContext","classes","AuthForm","history","showPassword","setShowPassword","authCtx","emailInputRef","passwordInputRef","handleCallbackResponse","response","console","log","credential","userObj","setUserObject","user","document","getElementById","hidden","logoutHandler","google","accounts","id","initialize","client_id","callback","renderButton","theme","size","isLoading","setIsLoading","toggleShowPassword","submitionHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","url","fetch","method","body","JSON","stringify","email","password","headers","then","res","ok","json","data","errorMessage","error","message","Error","experationTime","Date","getTime","login","token","_id","role","cycleid","toISOString","replace","catch","err","alert","auth","control","actions"],"mappings":"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","sourcesContent":["import { useState, useRef, useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\n\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\n\nconst AuthForm = () => {\n  const history = useHistory();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const authCtx = useContext(AuthContext);\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const handleCallbackResponse = (response) => {\n    console.log('hi');\n    console.log('Encoded JWT ID Token ' + response.credential);\n    var userObj = jwt_decode(response.credential);\n    console.log(userObj);\n    setUserObject({ user: jwt_decode(response.credential) });\n    document.getElementById('signupDiv').hidden = true;\n  };\n\n  const logoutHandler = () => {\n    setUserObject({});\n    document.getElementById('signupDiv').hidden = false;\n  };\n\n  useEffect(() => {\n    /* global google */\n    google.accounts.id.initialize({\n      client_id:\n        '622560773772-iifqp88cithvc1osdp9d03126cvv0d9s.apps.googleusercontent.com',\n      callback: handleCallbackResponse,\n    });\n\n    google.accounts.id.renderButton(document.getElementById('signupDiv'), {\n      theme: 'outline',\n      size: 'large',\n    });\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const toggleShowPassword = () => {\n    if (showPassword) setShowPassword(false);\n    if (!showPassword) setShowPassword(true);\n  };\n\n  const submitionHandler = (event) => {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    setIsLoading(true);\n\n    let url;\n    url = 'https://pacific-fortress-54764.herokuapp.com/users/login'; //login send req url\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = 'Authentication Failed';\n            if (data && data.error && data.error.message) {\n              errorMessage = data.error.message;\n            }\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        const experationTime = new Date(new Date().getTime() + +36000000);\n        authCtx.login(\n          data,\n          data.token,\n          data._id,\n          data.role,\n          data.cycleid,\n          experationTime.toISOString()\n        );\n        history.replace('/');\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>Login</h1>\n      <form onSubmit={submitionHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"userName\" id=\"userName\" required ref={emailInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type={showPassword ? 'text' : 'password'}\n            id=\"password\"\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <input type=\"checkbox\" onClick={toggleShowPassword} /> Show Password\n        <div className={classes.actions}>\n          {!isLoading && <button>Login</button>}\n          {isLoading && <p>Sending Request....</p>}\n        </div>\n        <div id=\"signupDiv\"></div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}