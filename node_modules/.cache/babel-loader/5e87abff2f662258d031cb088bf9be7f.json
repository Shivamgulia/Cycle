{"ast":null,"code":"var _jsxFileName = \"/Users/shivamgulia/Developer/Green Riders/JS/cycle/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: '',\n  isLoggedIn: false,\n  userid: '',\n  role: '',\n  cycleid: '',\n  data: {},\n  name: '',\n  id: '',\n  login: (data, token, userid, role, cycleid) => {},\n  logout: () => {},\n  addCycle: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nconst retrieveStoredData = () => {\n  const storedToken = localStorage.getItem('token');\n  const storedExpirationDate = localStorage.getItem('expirationTime');\n  const storedUserId = localStorage.getItem('userid');\n  const storedRole = localStorage.getItem('role');\n  const storedCycle = localStorage.getItem('cycleid');\n  const storedData = localStorage.getItem('data');\n  const storedName = localStorage.getItem('name');\n  const storedBranch = localStorage.getItem('branch');\n  const storedRollno = localStorage.getItem('rollno');\n  const storedId = localStorage.getItem('id');\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\n\n  if (remainingTime <= 360) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n    localStorage.removeItem('userid');\n    localStorage.removeItem('role');\n    localStorage.removeItem('cycleid');\n    localStorage.removeItem('data');\n    localStorage.removeItem('name');\n    localStorage.removeItem('branch');\n    localStorage.removeItem('rollno');\n    localStorage.removeItem('id');\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    userid: storedUserId,\n    role: storedRole,\n    cycleid: storedCycle,\n    data: storedData,\n    name: storedName,\n    branch: storedBranch,\n    rollno: storedRollno,\n    id: storedId,\n    duration: remainingTime\n  };\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const tokenData = retrieveStoredData();\n  let initialToken;\n  let initialUserId;\n  let initialRole;\n  let initialCycle;\n  let initialData;\n  let initialName;\n  let initialBranch;\n  let initialRollno;\n  let initialId;\n\n  if (tokenData) {\n    initialData = tokenData.data;\n    initialToken = tokenData.token;\n    initialUserId = tokenData.userid;\n    initialRole = tokenData.role;\n    initialCycle = tokenData.cycleid;\n    initialName = tokenData.name;\n    initialBranch = tokenData.branch;\n    initialRollno = tokenData.rollno;\n    initialId = tokenData._id;\n  }\n\n  const [data, setData] = useState(initialData);\n  const [userid, setUserId] = useState(initialUserId);\n  const [role, setRole] = useState(initialRole);\n  const [token, setToken] = useState(initialToken);\n  const [cycle, setCycle] = useState(initialCycle);\n  const [name, setName] = useState(initialName);\n  const [branch, setBranch] = useState(initialBranch);\n  const [rollno, setRollno] = useState(initialRollno);\n  const [id, setId] = useState(initialId);\n  const userIsLoggedIn = !!token;\n  const logoutHandler = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    setRole(null);\n    setCycle(null);\n    setData(null);\n    setName(null);\n    setBranch(null);\n    setRollno(null);\n    setId(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n    localStorage.removeItem('userid');\n    localStorage.removeItem('role');\n    localStorage.removeItem('cycleid');\n    localStorage.removeItem('data');\n    localStorage.removeItem('name');\n    localStorage.removeItem('branch');\n    localStorage.removeItem('rollno');\n    localStorage.removeItem('id');\n    localStorage.setItem('userIsLoggedIn', false);\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  }, []);\n\n  const addCycleHandler = cycle => {\n    localStorage.setItem('cycleid', cycle);\n    setCycle(cycle);\n  };\n\n  const loginHandler = (data, token, userid, role, cycle, expirationTime) => {\n    const remainingTime = calculateRemainingTime(expirationTime);\n    setData(data);\n    setToken(token);\n    setRole(role);\n    setUserId(userid);\n    setName(data.name);\n    setBranch(data.branch);\n    setRollno(data.rollno);\n    setCycle(cycle);\n    setCycle(data._id);\n    localStorage.setItem('token', token);\n    localStorage.setItem('role', role);\n    localStorage.setItem('userid', userid);\n    localStorage.setItem('cycleid', cycle);\n    localStorage.setItem('name', data.name);\n    localStorage.setItem('branch', data.branch);\n    localStorage.setItem('rollno', data.rollno);\n    localStorage.setItem('id', data._id);\n    localStorage.setItem('userIsLoggedIn', true);\n    localStorage.setItem('expirationTime', expirationTime);\n    localStorage.setItem('data', JSON.stringify(data));\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      // console.log(tokenData.duration);\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData, logoutHandler]);\n  const contextValue = {\n    data: data,\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    userid: userid,\n    role: role,\n    cycleid: cycle,\n    name: name,\n    branch: branch,\n    rollno: rollno,\n    id: id,\n    login: loginHandler,\n    logout: logoutHandler,\n    addCycle: addCycleHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"b+Y2Yp8spkYgm1GQKb6s943nm20=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Green Riders/JS/cycle/src/store/auth-context.js"],"names":["React","useState","useEffect","useCallback","logoutTimer","AuthContext","createContext","token","isLoggedIn","userid","role","cycleid","data","name","id","login","logout","addCycle","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","retrieveStoredData","storedToken","localStorage","getItem","storedExpirationDate","storedUserId","storedRole","storedCycle","storedData","storedName","storedBranch","storedRollno","storedId","remainingTime","removeItem","branch","rollno","duration","AuthContextProvider","props","tokenData","initialToken","initialUserId","initialRole","initialCycle","initialData","initialName","initialBranch","initialRollno","initialId","_id","setData","setUserId","setRole","setToken","cycle","setCycle","setName","setBranch","setRollno","setId","userIsLoggedIn","logoutHandler","setItem","clearTimeout","addCycleHandler","loginHandler","JSON","stringify","setTimeout","contextValue","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nlet logoutTimer;\n\nconst AuthContext = React.createContext({\n  token: '',\n  isLoggedIn: false,\n  userid: '',\n  role: '',\n  cycleid: '',\n  data: {},\n  name: '',\n  id: '',\n  login: (data, token, userid, role, cycleid) => {},\n  logout: () => {},\n  addCycle: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n\n  const remainingDuration = adjExpirationTime - currentTime;\n\n  return remainingDuration;\n};\n\nconst retrieveStoredData = () => {\n  const storedToken = localStorage.getItem('token');\n  const storedExpirationDate = localStorage.getItem('expirationTime');\n  const storedUserId = localStorage.getItem('userid');\n  const storedRole = localStorage.getItem('role');\n  const storedCycle = localStorage.getItem('cycleid');\n  const storedData = localStorage.getItem('data');\n  const storedName = localStorage.getItem('name');\n  const storedBranch = localStorage.getItem('branch');\n  const storedRollno = localStorage.getItem('rollno');\n  const storedId = localStorage.getItem('id');\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\n\n  if (remainingTime <= 360) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n    localStorage.removeItem('userid');\n    localStorage.removeItem('role');\n    localStorage.removeItem('cycleid');\n    localStorage.removeItem('data');\n    localStorage.removeItem('name');\n    localStorage.removeItem('branch');\n    localStorage.removeItem('rollno');\n    localStorage.removeItem('id');\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    userid: storedUserId,\n    role: storedRole,\n    cycleid: storedCycle,\n    data: storedData,\n    name: storedName,\n    branch: storedBranch,\n    rollno: storedRollno,\n    id: storedId,\n    duration: remainingTime,\n  };\n};\n\nexport const AuthContextProvider = (props) => {\n  const tokenData = retrieveStoredData();\n\n  let initialToken;\n  let initialUserId;\n  let initialRole;\n  let initialCycle;\n  let initialData;\n  let initialName;\n  let initialBranch;\n  let initialRollno;\n  let initialId;\n  if (tokenData) {\n    initialData = tokenData.data;\n    initialToken = tokenData.token;\n    initialUserId = tokenData.userid;\n    initialRole = tokenData.role;\n    initialCycle = tokenData.cycleid;\n    initialName = tokenData.name;\n    initialBranch = tokenData.branch;\n    initialRollno = tokenData.rollno;\n    initialId = tokenData._id;\n  }\n  const [data, setData] = useState(initialData);\n  const [userid, setUserId] = useState(initialUserId);\n  const [role, setRole] = useState(initialRole);\n  const [token, setToken] = useState(initialToken);\n  const [cycle, setCycle] = useState(initialCycle);\n  const [name, setName] = useState(initialName);\n  const [branch, setBranch] = useState(initialBranch);\n  const [rollno, setRollno] = useState(initialRollno);\n  const [id, setId] = useState(initialId);\n\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    setRole(null);\n    setCycle(null);\n    setData(null);\n    setName(null);\n    setBranch(null);\n    setRollno(null);\n    setId(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n    localStorage.removeItem('userid');\n    localStorage.removeItem('role');\n    localStorage.removeItem('cycleid');\n    localStorage.removeItem('data');\n    localStorage.removeItem('name');\n    localStorage.removeItem('branch');\n    localStorage.removeItem('rollno');\n    localStorage.removeItem('id');\n    localStorage.setItem('userIsLoggedIn', false);\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  }, []);\n  const addCycleHandler = (cycle) => {\n    localStorage.setItem('cycleid', cycle);\n    setCycle(cycle);\n  };\n  const loginHandler = (data, token, userid, role, cycle, expirationTime) => {\n    const remainingTime = calculateRemainingTime(expirationTime);\n    setData(data);\n    setToken(token);\n    setRole(role);\n    setUserId(userid);\n    setName(data.name);\n    setBranch(data.branch);\n    setRollno(data.rollno);\n    setCycle(cycle);\n    setCycle(data._id);\n    localStorage.setItem('token', token);\n    localStorage.setItem('role', role);\n    localStorage.setItem('userid', userid);\n    localStorage.setItem('cycleid', cycle);\n    localStorage.setItem('name', data.name);\n    localStorage.setItem('branch', data.branch);\n    localStorage.setItem('rollno', data.rollno);\n    localStorage.setItem('id', data._id);\n    localStorage.setItem('userIsLoggedIn', true);\n    localStorage.setItem('expirationTime', expirationTime);\n    localStorage.setItem('data', JSON.stringify(data));\n\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      // console.log(tokenData.duration);\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData, logoutHandler]);\n\n  const contextValue = {\n    data: data,\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    userid: userid,\n    role: role,\n    cycleid: cycle,\n    name: name,\n    branch: branch,\n    rollno: rollno,\n    id: id,\n    login: loginHandler,\n    logout: logoutHandler,\n    addCycle: addCycleHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}