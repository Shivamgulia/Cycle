{"ast":null,"code":"// import { useContext } from 'react';\n// import AuthContext from '../../store/auth-context';\nconst url = 'https://pacific-fortress-54764.herokuapp.com';\nexport async function rentCycle(props) {\n  // const authCtx = useContext(AuthContext);\n  // console.log({\n  //   'Content-Type': 'application/json',\n  //   Authorization: 'Bearer ' + props,\n  // });\n  // console.log(props);\n  let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json' // Authorization: 'Bearer ' + props,\n\n    }\n  });\n  let data = await response.json();\n  const userid = data.stdid;\n\n  if (!response.ok) {\n    // console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  if (props.role === 'student' && data.status === 'rented') {\n    throw new Error('Cycle already Rented');\n  }\n\n  if (props.role === 'guard' && data.status === '') {\n    throw new Error('Cycle not Rented Yet');\n  }\n\n  let cycleid;\n  if (props.role === 'student') cycleid = props.cycleid;\n  if (props.role === 'guard') cycleid = ''; // console.log({\n  //   cycleid,\n  //   userid: props.userid,\n  // });\n\n  response = await fetch(`${url}/users/${userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      cycleid\n    }),\n    headers: {\n      'Content-Type': 'application/json' // Authorization: 'Bearer ' + props,\n\n    }\n  });\n  data = await response.json(); // console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  let user;\n  if (props.role === 'student') user = props.userid;\n  if (props.role === 'guard') user = userid;\n  let stat;\n  if (props.role === 'student') stat = 'rented';\n  if (props.role === 'guard') stat = ''; // console.log({\n  //   staus: stat,\n  //   userid: user,\n  // });\n\n  response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      status: stat,\n      stdid: user\n    }),\n    headers: {\n      'Content-Type': 'application/json' // Authorization: 'Bearer ' + props,\n\n    }\n  });\n  data = await response.json();\n\n  if (!response.ok) {\n    // console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  console.log('rented');\n  return 'Cycle Rented';\n} //\n// export async function returnCycle(props) {\n//   // const authCtx = useContext(AuthContext);\n//   console.log({\n//     'Content-Type': 'application/json',\n//     Authorization: 'Bearer ' + props,\n//   });\n//   let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   let data = await response.json();\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   if (data.status === 'rented') {\n//     throw new Error('Cycle already Rented');\n//   }\n//   response = await fetch(`${url}/users/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ status: 'rented', cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   data = await response.json();\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   response = await fetch(`${url}/cycles/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   data = await response.json();\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   return data;\n// }\n//\n//\n//\n//\n\nexport async function getSingleQuote(props) {\n  const response = await fetch(`http://localhost:8080/quotes/${props.id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: props.id,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(props) {\n  const response = await fetch('http://localhost:8080/quotes/', {\n    method: 'POST',\n    body: JSON.stringify(props.quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n} // export async function deleteQuote(quoteId) {\n//   console.log('a' + quoteId);\n//   const response = await fetch(`http://localhost:8080/quotes/${quoteId}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not create quote.');\n//   }\n//   console.log('well');\n//   return null;\n// }\n\nexport async function addComment(props) {\n  console.log('fuck');\n  console.log(`Bearer ${props.token}`);\n  const response = await fetch('http://localhost:8080/comments', {\n    method: 'POST',\n    body: JSON.stringify(props.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n  console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n} // export async function getAllComments(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n//   const data = await response.json();\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not get comments.');\n//   }\n//   const transformedComments = [];\n//   for (const key in data) {\n//     const commentObj = {\n//       id: key,\n//       ...data[key],\n//     };\n//     transformedComments.push(commentObj);\n//   }\n//   return transformedComments;\n// }","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Green Riders/JS/cycle/src/components/lib/api.js"],"names":["url","rentCycle","props","response","fetch","cycleid","method","headers","data","json","userid","stdid","ok","Error","message","role","status","body","JSON","stringify","user","stat","console","log","getSingleQuote","id","Authorization","token","loadedQuote","addQuote","quoteData","addComment","commentData","commentId","name"],"mappings":"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","sourcesContent":["// import { useContext } from 'react';\n// import AuthContext from '../../store/auth-context';\n\nconst url = 'https://pacific-fortress-54764.herokuapp.com';\n\nexport async function rentCycle(props) {\n  // const authCtx = useContext(AuthContext);\n  // console.log({\n  //   'Content-Type': 'application/json',\n  //   Authorization: 'Bearer ' + props,\n  // });\n  // console.log(props);\n  let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      // Authorization: 'Bearer ' + props,\n    },\n  });\n  let data = await response.json();\n  const userid = data.stdid;\n\n  if (!response.ok) {\n    // console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  if (props.role === 'student' && data.status === 'rented') {\n    throw new Error('Cycle already Rented');\n  }\n\n  if (props.role === 'guard' && data.status === '') {\n    throw new Error('Cycle not Rented Yet');\n  }\n\n  let cycleid;\n  if (props.role === 'student') cycleid = props.cycleid;\n  if (props.role === 'guard') cycleid = '';\n\n  // console.log({\n  //   cycleid,\n  //   userid: props.userid,\n  // });\n  response = await fetch(`${url}/users/${userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({ cycleid }),\n    headers: {\n      'Content-Type': 'application/json',\n      // Authorization: 'Bearer ' + props,\n    },\n  });\n\n  data = await response.json();\n\n  // console.log(response);\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  let user;\n  if (props.role === 'student') user = props.userid;\n  if (props.role === 'guard') user = userid;\n\n  let stat;\n  if (props.role === 'student') stat = 'rented';\n  if (props.role === 'guard') stat = '';\n\n  // console.log({\n  //   staus: stat,\n  //   userid: user,\n  // });\n\n  response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({ status: stat, stdid: user }),\n    headers: {\n      'Content-Type': 'application/json',\n      // Authorization: 'Bearer ' + props,\n    },\n  });\n\n  data = await response.json();\n\n  if (!response.ok) {\n    // console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  console.log('rented');\n  return 'Cycle Rented';\n}\n\n//\n\n// export async function returnCycle(props) {\n//   // const authCtx = useContext(AuthContext);\n//   console.log({\n//     'Content-Type': 'application/json',\n//     Authorization: 'Bearer ' + props,\n//   });\n//   let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   let data = await response.json();\n\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n\n//   if (data.status === 'rented') {\n//     throw new Error('Cycle already Rented');\n//   }\n\n//   response = await fetch(`${url}/users/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ status: 'rented', cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n\n//   data = await response.json();\n\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n\n//   response = await fetch(`${url}/cycles/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n\n//   data = await response.json();\n\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   return data;\n// }\n\n//\n\n//\n\n//\n\n//\n\nexport async function getSingleQuote(props) {\n  const response = await fetch(`http://localhost:8080/quotes/${props.id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: props.id,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(props) {\n  const response = await fetch('http://localhost:8080/quotes/', {\n    method: 'POST',\n    body: JSON.stringify(props.quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\n// export async function deleteQuote(quoteId) {\n//   console.log('a' + quoteId);\n//   const response = await fetch(`http://localhost:8080/quotes/${quoteId}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not create quote.');\n//   }\n//   console.log('well');\n\n//   return null;\n// }\n\nexport async function addComment(props) {\n  console.log('fuck');\n  console.log(`Bearer ${props.token}`);\n  const response = await fetch('http://localhost:8080/comments', {\n    method: 'POST',\n    body: JSON.stringify(props.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n  console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\n// export async function getAllComments(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not get comments.');\n//   }\n\n//   const transformedComments = [];\n\n//   for (const key in data) {\n//     const commentObj = {\n//       id: key,\n//       ...data[key],\n//     };\n\n//     transformedComments.push(commentObj);\n//   }\n\n//   return transformedComments;\n// }\n"]},"metadata":{},"sourceType":"module"}