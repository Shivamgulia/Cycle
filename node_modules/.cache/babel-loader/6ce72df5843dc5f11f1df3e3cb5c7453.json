{"ast":null,"code":"const FIREBASE_DOMAIN = \"https://quotes-33a21-default-rtdb.firebaseio.com\";\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\n\nconst getDeleted = async () => {\n  setloadingDeleted(true);\n  const response = await fetch(\"https://quotes-33a21-default-rtdb.firebaseio.com/deleted.json\");\n\n  if (!response.ok) {\n    throw new Error(\"Somethong Went Wrong\");\n  }\n\n  const deleted = await response.json();\n  setloadingDeleted(false);\n};\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}\nexport async function deleteQuote(quotes) {\n  const response = await fetch(`${FIREBASE_DOMAIN}`, {\n    method: \"POST\",\n    body: JSON.stringify(quotes),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: \"POST\",\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments.\");\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"sources":["/Users/shivamgulia/Developer/React js/Routing/09-time-to-practice-starting-code/src/components/lib/api.js"],"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","getDeleted","setloadingDeleted","deleted","addQuote","quoteData","method","body","JSON","stringify","headers","deleteQuote","quotes","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"mappings":"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","sourcesContent":["const FIREBASE_DOMAIN = \"https://quotes-33a21-default-rtdb.firebaseio.com\";\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nconst getDeleted = async () => {\n  setloadingDeleted(true);\n  const response = await fetch(\n    \"https://quotes-33a21-default-rtdb.firebaseio.com/deleted.json\"\n  );\n\n  if (!response.ok) {\n    throw new Error(\"Somethong Went Wrong\");\n  }\n\n  const deleted = await response.json();\n\n  setloadingDeleted(false);\n};\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}\n\nexport async function deleteQuote(quotes) {\n  const response = await fetch(`${FIREBASE_DOMAIN}`, {\n    method: \"POST\",\n    body: JSON.stringify(quotes),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(requestData.commentData),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments.\");\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n"]},"metadata":{},"sourceType":"module"}