{"ast":null,"code":"var _jsxFileName = \"/Users/shivamgulia/Developer/QProject/React/QUOTES/src/components/auth/AuthForm.js\",\n    _s2 = $RefreshSig$();\n\nimport { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const history = useHistory();\n  const authCtx = useContext(AuthContext);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef(); // const [isLogin, setIsLogin] = useState(true);\n\n  const [isLoading, setIsLoading] = useState(false); // const switchAuthModeHandler = () => {\n  //   setIsLogin((prevState) => !prevState);\n  // };\n\n  const submitionHandler = event => {\n    _s();\n\n    const [showPassword, setShowPassword] = useState(false);\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    setIsLoading(true);\n\n    const toggleShowPassword = () => {\n      if (showPassword) setShowPassword(false);\n      if (!showPassword) setShowPassword(true);\n    };\n\n    let url; // if (isLogin) {\n    //   url =\n    //     'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBzllPQgDfwwi_Q0dkj-5Luvef0kNOfy9M';\n    // } else {\n    //   url =\n    //     'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBzllPQgDfwwi_Q0dkj-5Luvef0kNOfy9M';\n    // }\n\n    url = 'http://localhost:8080/api/v1/auth/login'; //login send req url\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        userName: enteredEmail,\n        password: enteredPassword\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      setIsLoading(false);\n\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          let errorMessage = 'Authentication Failed';\n\n          if (data && data.error && data.error.message) {\n            errorMessage = data.error.message;\n          }\n\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      const experationTime = new Date(new Date().getTime() + +36000000);\n      authCtx.login(data.token, experationTime.toISOString());\n      history.replace('/');\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  _s(submitionHandler, \"daguiRHWMFkqPgCh/ppD7CF5VuQ=\");\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitionHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"userName\",\n          id: \"userName\",\n          required: true,\n          ref: emailInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: 'password',\n          id: \"password\",\n          required: true,\n          ref: passwordInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading &&\n        /*#__PURE__*/\n        // <button>{isLogin ? 'Login' : 'Create Account'}</button>\n        _jsxDEV(\"button\", {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sending Request....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(AuthForm, \"WcJjghb9eigwV3oGlvIGVoOz1i8=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["/Users/shivamgulia/Developer/QProject/React/QUOTES/src/components/auth/AuthForm.js"],"names":["useState","useRef","useContext","useHistory","AuthContext","classes","AuthForm","history","authCtx","emailInputRef","passwordInputRef","isLoading","setIsLoading","submitionHandler","event","showPassword","setShowPassword","preventDefault","enteredEmail","current","value","enteredPassword","toggleShowPassword","url","fetch","method","body","JSON","stringify","userName","password","headers","then","res","ok","json","data","errorMessage","error","message","Error","experationTime","Date","getTime","login","token","toISOString","replace","catch","err","alert","auth","control","actions"],"mappings":"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","sourcesContent":["import { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\n\nconst AuthForm = () => {\n  const history = useHistory();\n\n  const authCtx = useContext(AuthContext);\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  // const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // const switchAuthModeHandler = () => {\n  //   setIsLogin((prevState) => !prevState);\n  // };\n  const submitionHandler = (event) => {\n    const [showPassword, setShowPassword] = useState(false);\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    setIsLoading(true);\n\n    const toggleShowPassword = () => {\n      if (showPassword) setShowPassword(false);\n      if (!showPassword) setShowPassword(true);\n    };\n\n    let url;\n\n    // if (isLogin) {\n    //   url =\n    //     'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBzllPQgDfwwi_Q0dkj-5Luvef0kNOfy9M';\n    // } else {\n    //   url =\n    //     'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBzllPQgDfwwi_Q0dkj-5Luvef0kNOfy9M';\n    // }\n    url = 'http://localhost:8080/api/v1/auth/login'; //login send req url\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        userName: enteredEmail,\n        password: enteredPassword,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = 'Authentication Failed';\n            if (data && data.error && data.error.message) {\n              errorMessage = data.error.message;\n            }\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        const experationTime = new Date(new Date().getTime() + +36000000);\n        authCtx.login(data.token, experationTime.toISOString());\n        history.replace('/');\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n\n  return (\n    <section className={classes.auth}>\n      {/* <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1> */}\n      <h1>Login</h1>\n      <form onSubmit={submitionHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"userName\" id=\"userName\" required ref={emailInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type={'password'}\n            id=\"password\"\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && (\n            // <button>{isLogin ? 'Login' : 'Create Account'}</button>\n            <button>Login</button>\n          )}\n          {isLoading && <p>Sending Request....</p>}\n          {/* <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button> */}\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}