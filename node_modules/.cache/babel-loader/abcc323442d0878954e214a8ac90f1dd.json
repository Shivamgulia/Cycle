{"ast":null,"code":"var _jsxFileName = \"/Users/shivamgulia/Developer/Reactjs/Routing/09-time-to-practice-starting-code/src/components/comments/Comments.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm'; // import LoadingSpinner from '../UI/LoadingSpinner';\n// import CommentsList from './CommentsList';\n// import useHttp from '../../components/hooks/use-http';\n\nimport { addComment } from '../lib/api'; // import { getAllComments } from '../lib/api';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = props => {\n  _s();\n\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const {\n    sendRequest,\n    status,\n    data: loadedComments\n  } = useHttp(addComment);\n  const quoteId = params.quoteId; // useEffect(() => {\n  //   sendRequest(quoteId);\n  // }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentsHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n  let comments = props.quote.comments; // if (status === 'pending') {\n  //   comments = (\n  //     <div className=\"centered\">\n  //       <LoadingSpinner />\n  //     </div>\n  //   );\n  // }\n  // if (status === 'completed') {\n  //   comments = <CommentsList comments={loadedComments} />;\n  // }\n  // if (\n  //   status === 'completed' &&\n  //   (!loadedComments || loadedComments.length === 0)\n  // ) {\n  //   comments = <p className=\"centered\">No Comments Found.</p>;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.comments,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), !isAddingComment && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: startAddCommentHandler,\n      children: \"Add a Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), isAddingComment && /*#__PURE__*/_jsxDEV(NewCommentForm, {\n      quoteId: params.quoteId,\n      onAddComment: addedCommentsHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), comments]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comments, \"I+PLSYK/WXmPKozm4xW1bQ6gV8M=\", true, function () {\n  return [useParams];\n});\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Reactjs/Routing/09-time-to-practice-starting-code/src/components/comments/Comments.js"],"names":["useState","useEffect","useCallback","useParams","classes","NewCommentForm","addComment","Comments","props","isAddingComment","setIsAddingComment","params","sendRequest","status","data","loadedComments","useHttp","quoteId","startAddCommentHandler","addedCommentsHandler","comments","quote"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CACA;AACA;AACA;;AACA,SAASC,UAAT,QAA2B,YAA3B,C,CACA;;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAMW,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAM;AAAES,IAAAA,WAAF;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA,IAAI,EAAEC;AAA7B,MAAgDC,OAAO,CAACV,UAAD,CAA7D;AAEA,QAAMW,OAAO,GAAGN,MAAM,CAACM,OAAvB,CAL0B,CAO1B;AACA;AACA;;AAEA,QAAMC,sBAAsB,GAAG,MAAM;AACnCR,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAFD;;AAIA,QAAMS,oBAAoB,GAAGjB,WAAW,CAAC,MAAM;AAC7CU,IAAAA,WAAW,CAACK,OAAD,CAAX;AACD,GAFuC,EAErC,CAACA,OAAD,EAAUL,WAAV,CAFqC,CAAxC;AAIA,MAAIQ,QAAQ,GAAGZ,KAAK,CAACa,KAAN,CAAYD,QAA3B,CAnB0B,CAoB1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAS,IAAA,SAAS,EAAEhB,OAAO,CAACgB,QAA5B;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEG,CAACX,eAAD,iBACC;AAAQ,MAAA,SAAS,EAAC,KAAlB;AAAwB,MAAA,OAAO,EAAES,sBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAOGT,eAAe,iBACd,QAAC,cAAD;AACE,MAAA,OAAO,EAAEE,MAAM,CAACM,OADlB;AAEE,MAAA,YAAY,EAAEE;AAFhB;AAAA;AAAA;AAAA;AAAA,YARJ,EAaGC,QAbH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAtDD;;GAAMb,Q;UAEWJ,S;;;KAFXI,Q;AAwDN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\n// import LoadingSpinner from '../UI/LoadingSpinner';\n// import CommentsList from './CommentsList';\n// import useHttp from '../../components/hooks/use-http';\nimport { addComment } from '../lib/api';\n// import { getAllComments } from '../lib/api';\n\nconst Comments = (props) => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { sendRequest, status, data: loadedComments } = useHttp(addComment);\n\n  const quoteId = params.quoteId;\n\n  // useEffect(() => {\n  //   sendRequest(quoteId);\n  // }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentsHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  let comments = props.quote.comments;\n  // if (status === 'pending') {\n  //   comments = (\n  //     <div className=\"centered\">\n  //       <LoadingSpinner />\n  //     </div>\n  //   );\n  // }\n  // if (status === 'completed') {\n  //   comments = <CommentsList comments={loadedComments} />;\n  // }\n  // if (\n  //   status === 'completed' &&\n  //   (!loadedComments || loadedComments.length === 0)\n  // ) {\n  //   comments = <p className=\"centered\">No Comments Found.</p>;\n  // }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={params.quoteId}\n          onAddComment={addedCommentsHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}