{"ast":null,"code":"var _jsxFileName = \"/Users/shivamgulia/Developer/Green Riders/JS/cycle/src/components/QrScaner/Scanner.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { QrReader } from 'react-qr-reader';\nimport classes from './Scanner.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Scanner = props => {\n  _s();\n\n  const [scan, setScan] = useState(false);\n\n  const startReader = () => {\n    if (scan) setScan(false);\n    if (!scan) setScan(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.camera,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.action,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: startReader,\n        children: scan ? 'Close Camera' : 'Open Camera'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.camera,\n      children: scan && /*#__PURE__*/_jsxDEV(QrReader, {\n        onResult: (result, error) => {\n          if (!!result) {\n            props.scan(result === null || result === void 0 ? void 0 : result.text);\n          }\n\n          if (!!error) {\n            console.info(error);\n          }\n        },\n        style: {\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Scanner, \"ZS1GdzYHPkWHjxrOA9HI0REkauU=\");\n\n_c = Scanner;\nexport default Scanner; // import { useState, Fragment } from 'react';\n// import QRScan from 'qrscan';\n// const Scanner = (props) => {\n//   const [camera, setCamera] = useState(false);\n//   const openCamera = () => {\n//     setCamera(true);\n//     console.log(camera);\n//   };\n//   const onFind = (result, error) => {\n//     if (result) {\n//       props.scan(result);\n//     }\n//     if (error) {\n//       alert(error);\n//     }\n//   };\n//   return (\n//     <div>\n//       {camera ? (\n//         <QRScan onFind={onFind} />\n//       ) : (\n//         <div>\n//           <button onClick={openCamera}>\n//             {camera ? 'Close Camera' : 'Open Camera'}\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// export default Scanner;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scanner\");","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Green Riders/JS/cycle/src/components/QrScaner/Scanner.js"],"names":["React","useState","QrReader","classes","Scanner","props","scan","setScan","startReader","camera","action","result","error","text","console","info","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,OAAOC,OAAP,MAAoB,sBAApB;;;AACA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAMO,WAAW,GAAG,MAAM;AACxB,QAAIF,IAAJ,EAAUC,OAAO,CAAC,KAAD,CAAP;AACV,QAAI,CAACD,IAAL,EAAWC,OAAO,CAAC,IAAD,CAAP;AACZ,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAEJ,OAAO,CAACM,MAAxB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEN,OAAO,CAACO,MAAxB;AAAA,6BACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEF,WAA/B;AAAA,kBACGF,IAAI,GAAG,cAAH,GAAoB;AAD3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAEH,OAAO,CAACM,MAAxB;AAAA,gBACGH,IAAI,iBACH,QAAC,QAAD;AACE,QAAA,QAAQ,EAAE,CAACK,MAAD,EAASC,KAAT,KAAmB;AAC3B,cAAI,CAAC,CAACD,MAAN,EAAc;AACZN,YAAAA,KAAK,CAACC,IAAN,CAAWK,MAAX,aAAWA,MAAX,uBAAWA,MAAM,CAAEE,IAAnB;AACD;;AAED,cAAI,CAAC,CAACD,KAAN,EAAa;AACXE,YAAAA,OAAO,CAACC,IAAR,CAAaH,KAAb;AACD;AACF,SATH;AAUE,QAAA,KAAK,EAAE;AAAEI,UAAAA,KAAK,EAAE;AAAT;AAVT;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CAjCD;;GAAMZ,O;;KAAAA,O;AAmCN,eAAeA,OAAf,C,CAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useState } from 'react';\nimport { QrReader } from 'react-qr-reader';\n\nimport classes from './Scanner.module.css';\nconst Scanner = (props) => {\n  const [scan, setScan] = useState(false);\n\n  const startReader = () => {\n    if (scan) setScan(false);\n    if (!scan) setScan(true);\n  };\n\n  return (\n    <div className={classes.camera}>\n      <div className={classes.action}>\n        <button type=\"button\" onClick={startReader}>\n          {scan ? 'Close Camera' : 'Open Camera'}\n        </button>\n      </div>\n      <div className={classes.camera}>\n        {scan && (\n          <QrReader\n            onResult={(result, error) => {\n              if (!!result) {\n                props.scan(result?.text);\n              }\n\n              if (!!error) {\n                console.info(error);\n              }\n            }}\n            style={{ width: '100%' }}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Scanner;\n\n// import { useState, Fragment } from 'react';\n\n// import QRScan from 'qrscan';\n\n// const Scanner = (props) => {\n//   const [camera, setCamera] = useState(false);\n\n//   const openCamera = () => {\n//     setCamera(true);\n//     console.log(camera);\n//   };\n\n//   const onFind = (result, error) => {\n//     if (result) {\n//       props.scan(result);\n//     }\n//     if (error) {\n//       alert(error);\n//     }\n//   };\n//   return (\n//     <div>\n//       {camera ? (\n//         <QRScan onFind={onFind} />\n//       ) : (\n//         <div>\n//           <button onClick={openCamera}>\n//             {camera ? 'Close Camera' : 'Open Camera'}\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Scanner;\n"]},"metadata":{},"sourceType":"module"}