{"ast":null,"code":"// import { useContext } from 'react';\n// import AuthContext from '../../store/auth-context';\nconst url = 'https://pacific-fortress-54764.herokuapp.com/';\nexport async function getCycle(props) {\n  // const authCtx = useContext(AuthContext);\n  console.log({\n    'Content-Type': 'application/json',\n    Authorization: 'Bearer ' + props\n  });\n  const response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + props\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  if (data.status === 'rented') {\n    throw new Error('Cycle already Rented');\n  }\n\n  response = await fetch(`${url}/users/${props.userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      status: 'rented',\n      cycleid: props.cycleid\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + props\n    }\n  });\n  data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  response = await fetch(`${url}/cycles/${props.userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      cycleid: props.cycleid\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + props\n    }\n  });\n  data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  return data;\n} //\n//\n//\n//\n\nexport async function getSingleQuote(props) {\n  const response = await fetch(`http://localhost:8080/quotes/${props.id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: props.id,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(props) {\n  const response = await fetch('http://localhost:8080/quotes/', {\n    method: 'POST',\n    body: JSON.stringify(props.quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n} // export async function deleteQuote(quoteId) {\n//   console.log('a' + quoteId);\n//   const response = await fetch(`http://localhost:8080/quotes/${quoteId}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not create quote.');\n//   }\n//   console.log('well');\n//   return null;\n// }\n\nexport async function addComment(props) {\n  console.log('fuck');\n  console.log(`Bearer ${props.token}`);\n  const response = await fetch('http://localhost:8080/comments', {\n    method: 'POST',\n    body: JSON.stringify(props.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n  console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n} // export async function getAllComments(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n//   const data = await response.json();\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not get comments.');\n//   }\n//   const transformedComments = [];\n//   for (const key in data) {\n//     const commentObj = {\n//       id: key,\n//       ...data[key],\n//     };\n//     transformedComments.push(commentObj);\n//   }\n//   return transformedComments;\n// }","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Green Riders/JS/cycle/src/components/lib/api.js"],"names":["url","getCycle","props","console","log","Authorization","response","fetch","cycleid","headers","data","json","ok","Error","message","status","userid","method","body","JSON","stringify","getSingleQuote","id","token","loadedQuote","addQuote","quoteData","addComment","commentData","commentId","name"],"mappings":"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","sourcesContent":["// import { useContext } from 'react';\n// import AuthContext from '../../store/auth-context';\n\nconst url = 'https://pacific-fortress-54764.herokuapp.com/';\n\nexport async function getCycle(props) {\n  // const authCtx = useContext(AuthContext);\n  console.log({\n    'Content-Type': 'application/json',\n    Authorization: 'Bearer ' + props,\n  });\n  const response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + props,\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  if (data.status === 'rented') {\n    throw new Error('Cycle already Rented');\n  }\n\n  response = await fetch(`${url}/users/${props.userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({ status: 'rented', cycleid: props.cycleid }),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + props,\n    },\n  });\n\n  data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  response = await fetch(`${url}/cycles/${props.userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({ cycleid: props.cycleid }),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + props,\n    },\n  });\n\n  data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n  return data;\n}\n\n//\n\n//\n\n//\n\n//\n\nexport async function getSingleQuote(props) {\n  const response = await fetch(`http://localhost:8080/quotes/${props.id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: props.id,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(props) {\n  const response = await fetch('http://localhost:8080/quotes/', {\n    method: 'POST',\n    body: JSON.stringify(props.quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\n// export async function deleteQuote(quoteId) {\n//   console.log('a' + quoteId);\n//   const response = await fetch(`http://localhost:8080/quotes/${quoteId}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not create quote.');\n//   }\n//   console.log('well');\n\n//   return null;\n// }\n\nexport async function addComment(props) {\n  console.log('fuck');\n  console.log(`Bearer ${props.token}`);\n  const response = await fetch('http://localhost:8080/comments', {\n    method: 'POST',\n    body: JSON.stringify(props.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n  console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\n// export async function getAllComments(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not get comments.');\n//   }\n\n//   const transformedComments = [];\n\n//   for (const key in data) {\n//     const commentObj = {\n//       id: key,\n//       ...data[key],\n//     };\n\n//     transformedComments.push(commentObj);\n//   }\n\n//   return transformedComments;\n// }\n"]},"metadata":{},"sourceType":"module"}