{"ast":null,"code":"var _jsxFileName = \"/Users/shivamgulia/Developer/QProject/React/QUOTES/src/pages/AllQuotes.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useContext } from 'react';\nimport { useEffect, useCallback } from 'react/cjs/react.development';\nimport QuoteList from '../components/quotes/QuoteList';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\nimport useHttp from '../components/hooks/use-http';\nimport { getAllQuotes } from '../components/lib/api';\nimport AuthContext from '../store/auth-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AllQuotes = () => {\n  _s();\n\n  const authCtx = useContext(AuthContext);\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error\n  } = useHttp(getAllQuotes, true);\n  useEffect(() => {\n    sendRequest(authCtx.token);\n  }, [sendRequest, authCtx.token]); // console.log(loadedQuotes);\n\n  useCallback(() => {\n    sendRequest(authCtx.token);\n  }, [sendRequest, authCtx.token]);\n\n  if (status === 'pending') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return /*#__PURE__*/_jsxDEV(NoQuotesFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(QuoteList, {\n      quotes: loadedQuotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AllQuotes, \"zHwnYkVdAJY1rXM8fbEUI7wYw1k=\", false, function () {\n  return [useHttp];\n});\n\n_c = AllQuotes;\nexport default AllQuotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllQuotes\");","map":{"version":3,"sources":["/Users/shivamgulia/Developer/QProject/React/QUOTES/src/pages/AllQuotes.js"],"names":["Fragment","useContext","useEffect","useCallback","QuoteList","LoadingSpinner","NoQuotesFound","useHttp","getAllQuotes","AuthContext","AllQuotes","authCtx","sendRequest","status","data","loadedQuotes","error","token","length"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,6BAAvC;AAEA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,aAAP,MAA0B,oCAA1B;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAMC,OAAO,GAAGV,UAAU,CAACQ,WAAD,CAA1B;AACA,QAAM;AACJG,IAAAA,WADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,IAAI,EAAEC,YAHF;AAIJC,IAAAA;AAJI,MAKFT,OAAO,CAACC,YAAD,EAAe,IAAf,CALX;AAOAN,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,WAAW,CAACD,OAAO,CAACM,KAAT,CAAX;AACD,GAFQ,EAEN,CAACL,WAAD,EAAcD,OAAO,CAACM,KAAtB,CAFM,CAAT,CATsB,CAYtB;;AAEAd,EAAAA,WAAW,CAAC,MAAM;AAChBS,IAAAA,WAAW,CAACD,OAAO,CAACM,KAAT,CAAX;AACD,GAFU,EAER,CAACL,WAAD,EAAcD,OAAO,CAACM,KAAtB,CAFQ,CAAX;;AAIA,MAAIJ,MAAM,KAAK,SAAf,EAA0B;AACxB,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAIG,KAAJ,EAAW;AACT,wBAAO;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA,gBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIH,MAAM,KAAK,WAAX,KAA2B,CAACE,YAAD,IAAiBA,YAAY,CAACG,MAAb,KAAwB,CAApE,CAAJ,EAA4E;AAC1E,wBAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE,QAAC,QAAD;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,MAAM,EAAEH;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvCD;;GAAML,S;UAOAH,O;;;KAPAG,S;AAyCN,eAAeA,SAAf","sourcesContent":["import { Fragment, useContext } from 'react';\nimport { useEffect, useCallback } from 'react/cjs/react.development';\n\nimport QuoteList from '../components/quotes/QuoteList';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\nimport useHttp from '../components/hooks/use-http';\nimport { getAllQuotes } from '../components/lib/api';\nimport AuthContext from '../store/auth-context';\n\nconst AllQuotes = () => {\n  const authCtx = useContext(AuthContext);\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error,\n  } = useHttp(getAllQuotes, true);\n\n  useEffect(() => {\n    sendRequest(authCtx.token);\n  }, [sendRequest, authCtx.token]);\n  // console.log(loadedQuotes);\n\n  useCallback(() => {\n    sendRequest(authCtx.token);\n  }, [sendRequest, authCtx.token]);\n\n  if (status === 'pending') {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return <NoQuotesFound />;\n  }\n\n  return (\n    <Fragment>\n      <QuoteList quotes={loadedQuotes} />\n    </Fragment>\n  );\n};\n\nexport default AllQuotes;\n"]},"metadata":{},"sourceType":"module"}