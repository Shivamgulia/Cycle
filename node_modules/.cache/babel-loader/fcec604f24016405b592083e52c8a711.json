{"ast":null,"code":"// import { useContext } from 'react';\n// import AuthContext from '../../store/auth-context';\nconst url = 'https://pacific-fortress-54764.herokuapp.com';\nexport async function rentCycle(props) {\n  // const authCtx = useContext(AuthContext);\n  // console.log({\n  //   'Content-Type': 'application/json',\n  //   Authorization: 'Bearer ' + props,\n  // });\n  console.log(props);\n  let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json' // Authorization: 'Bearer ' + props,\n\n    }\n  });\n  let data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  if (props.role === 'student' && data.status === 'rented') {\n    throw new Error('Cycle already Rented');\n  }\n\n  if (props.role === 'guard' && data.status === '') {\n    throw new Error('Cycle already Rented');\n  }\n\n  let cycle;\n  if (props.role === 'student') cycle = props.cycleid;\n  if (props.role === 'guard') cycle = '';\n  console.log({\n    cycleid: cycle\n  });\n  response = await fetch(`${url}/users/${props.userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      cycleid: cycle\n    }),\n    headers: {\n      'Content-Type': 'application/json' // Authorization: 'Bearer ' + props,\n\n    }\n  });\n  data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  let user;\n  if (props.role === 'user') user = props.userid;\n  if (props.role === 'guard') user = '';\n  let stat;\n  if (props.role === 'user') stat = 'rented';\n  if (props.role === 'guard') stat = '';\n  console.log({\n    staus: stat,\n    userid: user\n  });\n  response = await fetch(`${url}/cycles/${props.userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      status: stat,\n      userid: user\n    }),\n    headers: {\n      'Content-Type': 'application/json' // Authorization: 'Bearer ' + props,\n\n    }\n  });\n  data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  return data;\n} //\n// export async function returnCycle(props) {\n//   // const authCtx = useContext(AuthContext);\n//   console.log({\n//     'Content-Type': 'application/json',\n//     Authorization: 'Bearer ' + props,\n//   });\n//   let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   let data = await response.json();\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   if (data.status === 'rented') {\n//     throw new Error('Cycle already Rented');\n//   }\n//   response = await fetch(`${url}/users/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ status: 'rented', cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   data = await response.json();\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   response = await fetch(`${url}/cycles/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   data = await response.json();\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   return data;\n// }\n//\n//\n//\n//\n\nexport async function getSingleQuote(props) {\n  const response = await fetch(`http://localhost:8080/quotes/${props.id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: props.id,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(props) {\n  const response = await fetch('http://localhost:8080/quotes/', {\n    method: 'POST',\n    body: JSON.stringify(props.quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n} // export async function deleteQuote(quoteId) {\n//   console.log('a' + quoteId);\n//   const response = await fetch(`http://localhost:8080/quotes/${quoteId}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not create quote.');\n//   }\n//   console.log('well');\n//   return null;\n// }\n\nexport async function addComment(props) {\n  console.log('fuck');\n  console.log(`Bearer ${props.token}`);\n  const response = await fetch('http://localhost:8080/comments', {\n    method: 'POST',\n    body: JSON.stringify(props.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`\n    }\n  });\n  const data = await response.json();\n  console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n} // export async function getAllComments(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n//   const data = await response.json();\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not get comments.');\n//   }\n//   const transformedComments = [];\n//   for (const key in data) {\n//     const commentObj = {\n//       id: key,\n//       ...data[key],\n//     };\n//     transformedComments.push(commentObj);\n//   }\n//   return transformedComments;\n// }","map":{"version":3,"sources":["/Users/shivamgulia/Developer/Green Riders/JS/cycle/src/components/lib/api.js"],"names":["url","rentCycle","props","console","log","response","fetch","cycleid","method","headers","data","json","ok","Error","message","role","status","cycle","userid","body","JSON","stringify","user","stat","staus","getSingleQuote","id","Authorization","token","loadedQuote","addQuote","quoteData","addComment","commentData","commentId","name"],"mappings":"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","sourcesContent":["// import { useContext } from 'react';\n// import AuthContext from '../../store/auth-context';\n\nconst url = 'https://pacific-fortress-54764.herokuapp.com';\n\nexport async function rentCycle(props) {\n  // const authCtx = useContext(AuthContext);\n  // console.log({\n  //   'Content-Type': 'application/json',\n  //   Authorization: 'Bearer ' + props,\n  // });\n  console.log(props);\n  let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      // Authorization: 'Bearer ' + props,\n    },\n  });\n  let data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  if (props.role === 'student' && data.status === 'rented') {\n    throw new Error('Cycle already Rented');\n  }\n\n  if (props.role === 'guard' && data.status === '') {\n    throw new Error('Cycle already Rented');\n  }\n\n  let cycle;\n  if (props.role === 'student') cycle = props.cycleid;\n  if (props.role === 'guard') cycle = '';\n\n  console.log({\n    cycleid: cycle,\n  });\n\n  response = await fetch(`${url}/users/${props.userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({ cycleid: cycle }),\n    headers: {\n      'Content-Type': 'application/json',\n      // Authorization: 'Bearer ' + props,\n    },\n  });\n\n  data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  let user;\n  if (props.role === 'user') user = props.userid;\n  if (props.role === 'guard') user = '';\n\n  let stat;\n  if (props.role === 'user') stat = 'rented';\n  if (props.role === 'guard') stat = '';\n\n  console.log({\n    staus: stat,\n    userid: user,\n  });\n\n  response = await fetch(`${url}/cycles/${props.userid}`, {\n    method: 'PATCH',\n    body: JSON.stringify({ status: stat, userid: user }),\n    headers: {\n      'Content-Type': 'application/json',\n      // Authorization: 'Bearer ' + props,\n    },\n  });\n\n  data = await response.json();\n\n  if (!response.ok) {\n    console.log(response);\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n  return data;\n}\n\n//\n\n// export async function returnCycle(props) {\n//   // const authCtx = useContext(AuthContext);\n//   console.log({\n//     'Content-Type': 'application/json',\n//     Authorization: 'Bearer ' + props,\n//   });\n//   let response = await fetch(`${url}/cycles/${props.cycleid}`, {\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n//   let data = await response.json();\n\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n\n//   if (data.status === 'rented') {\n//     throw new Error('Cycle already Rented');\n//   }\n\n//   response = await fetch(`${url}/users/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ status: 'rented', cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n\n//   data = await response.json();\n\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n\n//   response = await fetch(`${url}/cycles/${props.userid}`, {\n//     method: 'PATCH',\n//     body: JSON.stringify({ cycleid: props.cycleid }),\n//     headers: {\n//       'Content-Type': 'application/json',\n//       Authorization: 'Bearer ' + props,\n//     },\n//   });\n\n//   data = await response.json();\n\n//   if (!response.ok) {\n//     console.log(response);\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n//   return data;\n// }\n\n//\n\n//\n\n//\n\n//\n\nexport async function getSingleQuote(props) {\n  const response = await fetch(`http://localhost:8080/quotes/${props.id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: props.id,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(props) {\n  const response = await fetch('http://localhost:8080/quotes/', {\n    method: 'POST',\n    body: JSON.stringify(props.quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\n// export async function deleteQuote(quoteId) {\n//   console.log('a' + quoteId);\n//   const response = await fetch(`http://localhost:8080/quotes/${quoteId}`, {\n//     method: 'DELETE',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not create quote.');\n//   }\n//   console.log('well');\n\n//   return null;\n// }\n\nexport async function addComment(props) {\n  console.log('fuck');\n  console.log(`Bearer ${props.token}`);\n  const response = await fetch('http://localhost:8080/comments', {\n    method: 'POST',\n    body: JSON.stringify(props.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${props.token}`,\n    },\n  });\n  const data = await response.json();\n  console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\n// export async function getAllComments(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not get comments.');\n//   }\n\n//   const transformedComments = [];\n\n//   for (const key in data) {\n//     const commentObj = {\n//       id: key,\n//       ...data[key],\n//     };\n\n//     transformedComments.push(commentObj);\n//   }\n\n//   return transformedComments;\n// }\n"]},"metadata":{},"sourceType":"module"}